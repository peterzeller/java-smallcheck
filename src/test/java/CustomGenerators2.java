/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.runner.RunWith;
import smallcheck.SmallCheckRunner;
import smallcheck.annotations.From;
import smallcheck.annotations.Property;
import smallcheck.annotations.StaticFactory;
import smallcheck.generators.LongGen;
import smallcheck.generators.SeriesGen;

import java.math.BigInteger;
import java.util.function.Function;
import java.util.stream.Stream;

import static org.junit.Assert.assertTrue;


@RunWith(SmallCheckRunner.class)
public class CustomGenerators2 {


    @Property(maxInvocations = 5000000)
    @StaticFactory(value = ExprFactory.class, copyFunc = ExprCopy.class)
    public void testExpr(Expr e) {
        assertTrue(e.evaluate() < 8);
    }

    public static class ExprCopy implements Function<Object, Object> {

        @Override
        public Object apply(Object o) {
            return ((Expr) o).copy();
        }
    }


    public static class ExprFactory {
        public static Number number(int i) {
            return new Number(i);
        }

        public static Plus plus(Expr a, Expr b) {
            return new Plus(a, b);
        }

        public static Mult mult(Expr a, Expr b) {
            return new Mult(a, b);
        }
    }


    public static abstract class Expr {
        Expr parent = null;

        public void setParent(Expr parent) {
            if (this.parent != null) {
                throw new RuntimeException("parent already set");
            }
            this.parent = parent;
        }

        abstract int evaluate();

        public abstract Expr copy();
    }

    public static class Number extends Expr {
        int number;

        public Number(int number) {
            this.number = number;
        }

        @Override
        int evaluate() {
            return number;
        }

        @Override
        public Number copy() {
            return new Number(number);
        }

        @Override
        public String toString() {
            return "" + number;
        }


    }

    public static class Plus extends Expr {
        Expr left;
        Expr right;

        public Plus(Expr left, Expr right) {
            this.left = left;
            this.right = right;
            left.setParent(this);
            right.setParent(this);
        }

        @Override
        int evaluate() {
            return left.evaluate() + right.evaluate();
        }

        @Override
        public Plus copy() {
            return new Plus(left.copy(), right.copy());
        }

        @Override
        public String toString() {
            return "(" + left + " + " + right + ")";
        }
    }

    public static class Mult extends Expr {
        Expr left;
        Expr right;

        public Mult(Expr left, Expr right) {
            this.left = left;
            this.right = right;
            left.setParent(this);
            right.setParent(this);
        }

        @Override
        int evaluate() {
            return left.evaluate() * right.evaluate();
        }

        @Override
        public String toString() {
            return "(" + left + " * " + right + ")";
        }

        @Override
        public Mult copy() {
            return new Mult(left.copy(), right.copy());
        }
    }




}
